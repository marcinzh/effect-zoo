/*******************************/
/* Generated by `sbt meta/run` */
/*******************************/
package effect_zoo.bench.contests
import java.util.concurrent.TimeUnit
import org.openjdk.jmh.annotations._
import effect_zoo.registry.Registry

@State(Scope.Thread)
@BenchmarkMode(Array(Mode.Throughput))
@OutputTimeUnit(TimeUnit.SECONDS)
@Fork(jvmArgs = Array("-Dcats.effect.tracing.mode=DISABLED", "-Xms2g", "-Xmx2g"))
class Mulst {
  val reg = Registry.findByContestName("Mulst")

  val CatsCore__0__run = reg.findRound("CatsCore", 0).run
  val CatsCore__1__run = reg.findRound("CatsCore", 1).run
  val CatsCore__2__run = reg.findRound("CatsCore", 2).run
  val CatsCore__3__run = reg.findRound("CatsCore", 3).run
  val CatsCore__4__run = reg.findRound("CatsCore", 4).run
  val CatsEff__0__run = reg.findRound("CatsEff", 0).run
  val CatsEff__1__run = reg.findRound("CatsEff", 1).run
  val CatsEff__2__run = reg.findRound("CatsEff", 2).run
  val CatsEff__3__run = reg.findRound("CatsEff", 3).run
  val CatsEff__4__run = reg.findRound("CatsEff", 4).run
  val Turbolift__0__run = reg.findRound("Turbolift", 0).run
  val Turbolift__1__run = reg.findRound("Turbolift", 1).run
  val Turbolift__2__run = reg.findRound("Turbolift", 2).run
  val Turbolift__3__run = reg.findRound("Turbolift", 3).run
  val Turbolift__4__run = reg.findRound("Turbolift", 4).run
  val ZIO_Env__0__run = reg.findRound("ZIO_Env", 0).run
  val ZIO_Env__1__run = reg.findRound("ZIO_Env", 1).run
  val ZIO_Env__2__run = reg.findRound("ZIO_Env", 2).run
  val ZIO_Env__3__run = reg.findRound("ZIO_Env", 3).run
  val ZIO_Env__4__run = reg.findRound("ZIO_Env", 4).run
  val ZIO_Stateful__0__run = reg.findRound("ZIO_Stateful", 0).run
  val ZIO_Stateful__1__run = reg.findRound("ZIO_Stateful", 1).run
  val ZIO_Stateful__2__run = reg.findRound("ZIO_Stateful", 2).run
  val ZIO_Stateful__3__run = reg.findRound("ZIO_Stateful", 3).run
  val ZIO_Stateful__4__run = reg.findRound("ZIO_Stateful", 4).run
  val Kyo__0__run = reg.findRound("Kyo", 0).run
  val Kyo__1__run = reg.findRound("Kyo", 1).run
  val Kyo__2__run = reg.findRound("Kyo", 2).run
  val Kyo__3__run = reg.findRound("Kyo", 3).run
  val Kyo__4__run = reg.findRound("Kyo", 4).run
  
  @Benchmark def CatsCore__0 = CatsCore__0__run()
  @Benchmark def CatsCore__1 = CatsCore__1__run()
  @Benchmark def CatsCore__2 = CatsCore__2__run()
  @Benchmark def CatsCore__3 = CatsCore__3__run()
  @Benchmark def CatsCore__4 = CatsCore__4__run()
  @Benchmark def CatsEff__0 = CatsEff__0__run()
  @Benchmark def CatsEff__1 = CatsEff__1__run()
  @Benchmark def CatsEff__2 = CatsEff__2__run()
  @Benchmark def CatsEff__3 = CatsEff__3__run()
  @Benchmark def CatsEff__4 = CatsEff__4__run()
  @Benchmark def Turbolift__0 = Turbolift__0__run()
  @Benchmark def Turbolift__1 = Turbolift__1__run()
  @Benchmark def Turbolift__2 = Turbolift__2__run()
  @Benchmark def Turbolift__3 = Turbolift__3__run()
  @Benchmark def Turbolift__4 = Turbolift__4__run()
  @Benchmark def ZIO_Env__0 = ZIO_Env__0__run()
  @Benchmark def ZIO_Env__1 = ZIO_Env__1__run()
  @Benchmark def ZIO_Env__2 = ZIO_Env__2__run()
  @Benchmark def ZIO_Env__3 = ZIO_Env__3__run()
  @Benchmark def ZIO_Env__4 = ZIO_Env__4__run()
  @Benchmark def ZIO_Stateful__0 = ZIO_Stateful__0__run()
  @Benchmark def ZIO_Stateful__1 = ZIO_Stateful__1__run()
  @Benchmark def ZIO_Stateful__2 = ZIO_Stateful__2__run()
  @Benchmark def ZIO_Stateful__3 = ZIO_Stateful__3__run()
  @Benchmark def ZIO_Stateful__4 = ZIO_Stateful__4__run()
  @Benchmark def Kyo__0 = Kyo__0__run()
  @Benchmark def Kyo__1 = Kyo__1__run()
  @Benchmark def Kyo__2 = Kyo__2__run()
  @Benchmark def Kyo__3 = Kyo__3__run()
  @Benchmark def Kyo__4 = Kyo__4__run()
}
