/*******************************/
/* Generated by `sbt meta/run` */
/*******************************/
package effect_zoo.bench.contests
import java.util.concurrent.TimeUnit
import org.openjdk.jmh.annotations._
import effect_zoo.registry.Registry

@State(Scope.Thread)
@BenchmarkMode(Array(Mode.Throughput))
@OutputTimeUnit(TimeUnit.SECONDS)
@Fork(jvmArgs = Array("-Dcats.effect.tracing.mode=DISABLED", "-Xms2g", "-Xmx2g"))
class Crc {
  val reg = Registry.findByContestName("Crc")

  val Fs2__0__run = reg.findRound("Fs2", 0).run
  val Fs2__1__run = reg.findRound("Fs2", 1).run
  val Fs2__2__run = reg.findRound("Fs2", 2).run
  val Fs2__3__run = reg.findRound("Fs2", 3).run
  val Fs2__4__run = reg.findRound("Fs2", 4).run
  val ZIO__0__run = reg.findRound("ZIO", 0).run
  val ZIO__1__run = reg.findRound("ZIO", 1).run
  val ZIO__2__run = reg.findRound("ZIO", 2).run
  val ZIO__3__run = reg.findRound("ZIO", 3).run
  val ZIO__4__run = reg.findRound("ZIO", 4).run
  val Kyo__0__run = reg.findRound("Kyo", 0).run
  val Kyo__1__run = reg.findRound("Kyo", 1).run
  val Kyo__2__run = reg.findRound("Kyo", 2).run
  val Kyo__3__run = reg.findRound("Kyo", 3).run
  val Kyo__4__run = reg.findRound("Kyo", 4).run
  val Turbolift__0__run = reg.findRound("Turbolift", 0).run
  val Turbolift__1__run = reg.findRound("Turbolift", 1).run
  val Turbolift__2__run = reg.findRound("Turbolift", 2).run
  val Turbolift__3__run = reg.findRound("Turbolift", 3).run
  val Turbolift__4__run = reg.findRound("Turbolift", 4).run
  
  @Benchmark def Fs2__0 = Fs2__0__run()
  @Benchmark def Fs2__1 = Fs2__1__run()
  @Benchmark def Fs2__2 = Fs2__2__run()
  @Benchmark def Fs2__3 = Fs2__3__run()
  @Benchmark def Fs2__4 = Fs2__4__run()
  @Benchmark def ZIO__0 = ZIO__0__run()
  @Benchmark def ZIO__1 = ZIO__1__run()
  @Benchmark def ZIO__2 = ZIO__2__run()
  @Benchmark def ZIO__3 = ZIO__3__run()
  @Benchmark def ZIO__4 = ZIO__4__run()
  @Benchmark def Kyo__0 = Kyo__0__run()
  @Benchmark def Kyo__1 = Kyo__1__run()
  @Benchmark def Kyo__2 = Kyo__2__run()
  @Benchmark def Kyo__3 = Kyo__3__run()
  @Benchmark def Kyo__4 = Kyo__4__run()
  @Benchmark def Turbolift__0 = Turbolift__0__run()
  @Benchmark def Turbolift__1 = Turbolift__1__run()
  @Benchmark def Turbolift__2 = Turbolift__2__run()
  @Benchmark def Turbolift__3 = Turbolift__3__run()
  @Benchmark def Turbolift__4 = Turbolift__4__run()
}
